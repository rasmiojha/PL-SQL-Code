-----------------------------------Creating account table to store account data ----------------------------
CREATE TABLE ACCOUNTS
(
	--ACCOUNT_NUMBER NUMBER GENERATED BY DEFAULT AS IDENTITY ,
	ACCOUNT_NUMBER NUMBER PRIMARY KEY,
	ADHAR_NUMBER NUMBER,
	PANCARD_NUMBER VARCHAR2(20) ,
	DRIVING_LICENSE_NUMBER VARCHAR2(20),
	ACCOUNT_HOLDER_NAME VARCHAR2(1000),
	ACCOUNT_TYPE VARCHAR2(100),
	TRANSACTION_TYPE VARCHAR2(20),
	ADDRESS VARCHAR2(1000),
	BALANCE NUMBER,
	PHOTO BLOB,
	CREATED_DATE DATE DEFAULT SYSDATE ,
	STATUS VARCHAR2(10) DEFAULT 'ACTIVE'
);
-------------------------CREATING SEQUENCE TO GENERATE THE ACCOUNT NUMBER AUTOMETICALLY ---------------------------
CREATE SEQUENCE ACCOUNT_SEQ
START WITH 100000
INCREMENT BY 1
NO CYCLE
NO CACHE


--------------------Procedure to open an account ----------------------

CREATE OR REPLACE PROCEDURE 
(
P_ADHAR_CARD_NUMBER IN NUMBER,
P_PANCARD_NUMBER IN VARCHAR2,
P_DRIVING_LICENSE_NUMBER IN VARCHAR2,
P_ACCOUNT_HOLDER_NAME IN VARCHAR2,
P_ACCOUNT_TYPE IN VARCHAR2,
P_ADDRESS IN VARCHAR2,
P_INITIAL_DEPOSITE IN NUMBER
)IS

CORSOR C_ACCOUNT IS 
SELECT ACCOUNT_SEQ.NEXTVAL AS NEW_ACCOUNT_NUMBER FROM DUAL;
V_NEW_ACCOUNT_NUMBER NUMBER;
V_COUNT =NUMBER;


BEGIN 
	OPEN C_ACCOUNT;
	FETCH C_ACCOUNT INTO V_NEW_ACCOUNT_NUMBER;
	EXIST WHEN C_ACCOUNT%NOTFOUND;
	
	SELECT COUNT(*)
	INTO V_COUNT
	WHERE ADHAR_CARD_NUMBER = P_ADHAR_CARD_NUMBER;
	
	IF V_COUNT >0 THEN 
		DBMS_OUTPUT.PUT_LINE ('Account already exists in this Adhar Number '||P_ADHAR_NUMBER);
	ELSE
		INSERT INTO ACCOUNTS (ACCOUNT_NUMBER,ADHAR_CARD_NUMBER,PANCARD_NUMBER,DRIVING_LICENSE_NUMBER,ACCOUNT_HOLDER_NAME,ACCOUNT_TYPE,ADDRESS,BALANCE)
		VALUES (V_NEW_ACCOUNT_NUMBER,P_ADHAR_CARD_NUMBER,P_PANCARD_NUMBER,P_DRIVING_LICENCE_NUMBER,P_ACCOUNT_TYPE,P_ADDRESS,P_BALANCE);
	COMMIT;
	DBMS_OUTPUT.PUT_LINE ('ACCOUNT NUMBER CREATED SUCCESSFULLY WITH ACCOUNT NUMBER'|| V_NEW_ACCOUNT_NUMBER);
	CLOSE_C_ACCOUNT;
	END IF ;
EXCEPTION 
	WHEN OTHERS THEN 
		ROLLBACK;
		DBMS_OUTPUT.PUT_LINE('UNEXPECTED ERROR OCCURED '|| SQLERRM);
END;

----------------------CREATING CUTOMER TABLE -------------------
CREATE TABLE CUSTOMER 
(
	CUST_ID NUMBER PRIMARY KEY,
	CUST_NAME VARCHAR2(100),
	CUST_EMAIL VARCHAR2(100),
	CUST_ADDRESS VARCHAR2(100),
	CUST_PHONENO VARCHAR2(20)
);

------------CREATE TRANSACTION TABLE TO STORE TRANSACTIONS ------------

CREATE TABLE TRANSACTION 
(
	TRANSACTION_ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	TRANSACTION_DATE DATE DEFAULT SYSDATE ,
	TRANSACTION_TYPE VARCHAR2(20) CHECK (TRANSACTION_TYPE IN ('DEPOSIT','WITHDRAWAL')),
	TRANSACTION_MODE VARCHAR2(10) CHECK (TRANSACTION_MODE IN ('IN_PERSON','ONLINE')),
	ACCOUNT_NO NUMBER,
	AMOUNT NUMBER ,
	DESCRIPTION VARCHAR2(100)
	PRIMARY KEY PK_TRANSACTION_ID (TRANSACTION_ID),
	NOT NULL NK_AMOUNT (AMOUNT),
	FOREIGN KEY ACCOUNT_NO REFERENCES ACCOUNTS(ACCOUNT_NO)
);
---TRANSFERRING FUND FROM A ACCOUNT TO OTHER ACCOUNT -----------
		
	CREATE OR REPLACE PROCEDURE TransferFunds (
    p_FromAccountID IN NUMBER,
    p_ToAccountID IN NUMBER,
    p_Amount IN NUMBER
) IS
BEGIN
    UPDATE Accounts
    SET Balance = Balance - p_Amount
    WHERE AccountID = p_FromAccountID;

    UPDATE Accounts
    SET Balance = Balance + p_Amount
    WHERE AccountID = p_ToAccountID;
END;

------------USING CURSOR AND ERROR HANDLING ---------------------	
	
	
	CREATE OR REPLACE PROCEDURE TransferFunds (
    p_FromAccountID IN NUMBER,
    p_ToAccountID IN NUMBER,
    p_Amount IN NUMBER
) IS
    -- Declare variables to hold account balances and statuses
    v_FromBalance NUMBER;
    v_ToBalance NUMBER;
    v_FromStatus VARCHAR2(10);
    v_ToStatus VARCHAR2(10);
    
    -- Declare a cursor to fetch account details
    CURSOR c_Accounts IS
        SELECT AccountID, Balance, Status
        FROM Accounts
        WHERE AccountID IN (p_FromAccountID, p_ToAccountID)
        FOR UPDATE OF Balance;
    
    -- Exception for insufficient funds
    InsufficientFunds EXCEPTION;
    -- Exception for inactive account
    InactiveAccount EXCEPTION;
    
BEGIN
    -- Open the cursor
    OPEN c_Accounts;
    
    -- Fetch details for the source account
    FETCH c_Accounts INTO v_FromBalance, v_FromStatus;
    IF c_Accounts%NOTFOUND THEN
        RAISE_APPLICATION_ERROR(-20001, 'From Account not found');
    END IF;
    
    -- Fetch details for the destination account
    FETCH c_Accounts INTO v_ToBalance, v_ToStatus;
    IF c_Accounts%NOTFOUND THEN
        RAISE_APPLICATION_ERROR(-20002, 'To Account not found');
    END IF;
    
    -- Check if accounts are active
    IF v_FromStatus != 'ACTIVE' OR v_ToStatus != 'ACTIVE' THEN
        RAISE InactiveAccount;
    END IF;
    
    -- Check if there are sufficient funds
    IF v_FromBalance < p_Amount THEN
        RAISE InsufficientFunds;
    END IF;
    
    -- Update balances
    UPDATE Accounts
    SET Balance = Balance - p_Amount
    WHERE AccountID = p_FromAccountID;
    DBMS_OUTPUT.PUT_LINE("Your Account is debited by "||p_Amount ||"Availale balance is "||Balance);
    UPDATE Accounts
    SET Balance = Balance + p_Amount
    WHERE AccountID = p_ToAccountID;
	DBMS_OUTPUT.PUT_LINE("Your Account is credited with "||p_Amount||"Available balance is "||Balance);
    
    -- Commit the transaction
    COMMIT;
    
    -- Close the cursor
    CLOSE c_Accounts;
    
    DBMS_OUTPUT.PUT_LINE('Transfer successful');
    
EXCEPTION
    WHEN InsufficientFunds THEN
        ROLLBACK;
        DBMS_OUTPUT.PUT_LINE('Error: Insufficient funds in the source account');
    WHEN InactiveAccount THEN
        ROLLBACK;
        DBMS_OUTPUT.PUT_LINE('Error: One or both accounts are not active');
    WHEN OTHERS THEN
        ROLLBACK;
        DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
        CLOSE c_Accounts;
END TransferFunds;
--END ;

---------------------PROCEDURE TO DEPOSITE AMOUNT IN ACCOUNT ----------------------

CREATE OR REPLACE PROCEDURE DEPOSIT_AMOUNT
(
P_DEPOSIT_AMOUNT IN NUMBER ,
P_ACCOUNT_NO IN NUMBER,
P_TRANSACTION_MODE IN VARCHAR2
)IS

	V_ACCOUNT_NO ACCOUNTS.ACCOUNT%TYPE;
	V_STATUS ACCOUNTS.STATUS%TYPE;
	V_BALANCE ACCOUNTS.BALANCE%TYPE;
	CURSOR DI_AMOUNT IS
	SELECT BALANCE,STATUS 
	FROM ACCOUNTS 
	WHERE ACCOUNT_NO = P_ACCOUNT_NO 
	FOR UPDATE OF BALANCE;

INACTIVEACCOUNT EXCEPTION;

BEGIN 
	
	--open cursor
	OPEN DI_AMOUNT;
	--fetch cursor
	FETCH DI_AMOUNT INTO V_BALANCE,V_STATUS;
	--checking if account number is availbale 
	IF DI_AMOUNT%NOTFOUND THEN 
		RAISE_APPLICATION_ERROR(-2001,"ACCOUNT NOT FOUND ") ;
	END IF ;
	--checking if the acount is not active 
	IF V_STATUS != ACTIVE THEN
		RAISE INACTIVEACCOUNT;
	END IF ;
	
	--update acount
	UPDATE ACCOUNTS SET BALANCE = BALANCE + P_DEPOSIT_AMOUNT WHERE ACCOUNT_NO = P_ACCOUNT_NO;
	DBMS_OUTPUT.PUT_LINE("Your Account is credited with "||P_DEPOSIT_AMOUNT||"Available balance is "||BALANCE);
	--updating transaction table 
	INSERT INTO TRANSACTIONS (ACCOUNT_NO,TRANSACTION_TYPE,AMOUNT,TRANSACTION_DATE,TRANSACTION_MODE)
	VALUES (P_ACCOUNT_NO,'DEPOSIT',P_DEPOSIT_AMOUNT,SYSDATE,'P_TRANSACTION_MODE');
	COMMIT;
	
	DBMS_OUTPUT.PUT_LINE('DEPOSIT SUCESSFUL');
	--close cursor
	CLOSE DI_AMOUNT;
	
EXCEPTION
	WHEN NO DATA FOUND THEN
		ROLLBACK;
		DBMS_OUTPUT.PUT_LINE('ERROR : ACCOUNT' ||P_ACCOUNT_NO||'NOT FOUND ');
	WHEN INACTIVEACCOUNT THEN 
		ROLLBACK;
		DBMS_OUTPUT.PUT_LINE(P_ACCOUNT||'IS NOT ACTIVE');
	WHEN OTHERS THEN
		ROLL BACK;
		DBMS_OUTPUT.PUT_LINE('ERROR:'||SQLERRM);
		CLOSE DI_AMOUNT;
END DEPOSIT_AMOUNT;

---------PROCEDURE FOR WITHDRAWAL AMOUNT--------

CREATE OR REPLACE PROCEDURE WITHDRAWAL_AMOUNT 
(
P_ACCOUNT_NO IN NUMBER,
P_WITHDRAWAL_AMOUNT IN NUMBER,
P_FEE IN NUMBER,
P_MODE IN VARCHAR2
)
IS 

	V_ACCOUNT_NO ACCOUNTS.ACCOUNT_NO%TYPE;
	V_BALANCE ACCOUNTS.BALANCE%TYPE;
	V_STATUS ACCOUNTS.STATUS%TYPE;
	
	CURSOR WD_AMOUNT IS 
	SELECT BALANCE,STATUS 
	FROM ACCOUNTS 
	WHERE ACCOUNT_NO = P_ACCOUNT_NO
	FOR UPDATE OF BALANCE;

    -- Exception for insufficient funds
    InsufficientFunds EXCEPTION;
    -- Exception for inactive account
    InactiveAccount EXCEPTION;
BEGIN 
	--open cursor 
	OPEN WD_AMOUT;
	
	--fetch from cursor 
	FETCH WD_AMOUNT INTO V_BALANCE , V_STATUS ;
	IF WD_AMOUNT%NOTFOUND THEN 
		RAISE_APPLICATION_ERROR(-2002||'ACCOUNT IS NOT FOUND');
	END IF;
	-- Check if account is active or not
	IF V_STATUS != 'ACTIVE' THEN 
		RAISE InactiveAccount; 
	END IF;
	-- Check if there are sufficient funds
	IF V_BALANCE < P_AMOUNT THEN
		RAISE InsufficientFunds;
	END IF;
	---update balance ---
	UPDATE ACCOUNT
	SET BALANCE = BALANCE - P_AMOUNT- P_FEE
	WHERE ACCOUNT_NO = P_ACCOUNT_NO;
	DBMS_OUTPUT.PUT_LINE("Your Account is debited with "||p_Amount||"Available balance is "||Balance);
	--inserting transaction details into transcation table----
	INSERT INTO TRANSACTIONS (ACCOUNT_NO,TRANSACTION_TYPE ,TRANSACTION_MODE,TRANSACTION_DATE,TRANSACTION_HANDLING_FEE,AMOUNT,DESCRIPTION)
	VALUES(P_ACCOUNT_NO,'WITHDRAWAL',P_MODE,SYSDATE,P_FEE,'Withdrawal with handling fee');
	-- Commit the transaction
	COMMIT;
	CLOSE WD_AMOUT; 
	DBMS_OUTPUT.PUT_LINE('WITHDRAWAL IS SUCESSFUL');
EXCEPTION
	WHEN NO DATA FOUND 
	ROLL BACK;
	DBMS_OUTPUT.PUT_LINE(P_ACCOUNT_NO||'IS NOT FOUND');
	WHEN InactiveAccount THEN 
	ROLLBACK;
	DBMS_OUTPUT.PUT_LINE(P_ACCOUNT_NO||'IS NOT ACTIVE');
	WHEN InsufficientFunds THEN 
	ROLLBACK;
	DBMS_OUTPUT.PUT_LINE('INSUFFICIENT FUNDS AVAILABE');
	WHEN OTHERS THEN 
	ROLL BACK;
	DBMS_OUTPUT.PUT_LINE('ERROR IS '||SQLERRM);
	CLOSE WD_AMOUT;
END WITHDRAWAL_AMOUNT;
/


------------Steps to Handle Transaction Retries /RETRY LOGIC FOR ONLINE TRANSACTIONS -----------------

-----Ccreating table for failed transactions --------------------

CREATE TABLE FAILED_TRANSACTIONS
(
	TRANSACTION_ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	TRANSACTION_TYPE VARCHAR2(10) CHECK (TRANSACTION_TYPE IN ('DEPOSIT','WITHDRAWAL')),
	TRANSACTION_MODE VARCHAR2(10) CHECK (TRANSACTION_MODE IN ('IN_PERSON','ONLINE')),
	TRANSACTION_DATE DATE DEFAULT SYSDATE,
	ACCOUNT_NO NUMBER NOT NULL,
	AMOUNT NUMBER NOT NULL,
	RETRY_COUNT NUMBER,
	FAILURE_REASON VARCHAR2(100),
	LAST_RETRY_DATE DATE ,
	FOREIGN KEY ACCOUNT_NO REFERENCES ACCOUNTS(ACCOUNT_NO)
);


-----------------Update Procedures to Log Failures--Deposit Procedure--------------------------------------

CREATE OR REPLACE PROCEDURE DEPOSIT_AMOUNT
(
P_ACCOUNT_NO IN NUMBER,
P_AMOUNT IN NUMBER,
P_TRANSACTION_MODE IN VARCHAR2
)IS 

	V_ACCOUNT_NO ACCOUNTS.ACCOUNT_NO%TYPE ,
	V_BALANCE ACCOUNTS.BALANCE%TYPE ,
	V_STATUS ACCOUNTS.STATUS%TYPE,
	
	CURSOR DI_AMOUNT IS 
	SELECT BALANCE ,STATUS 
	FROM ACCOUNTS
	WHERE ACCOUNT_NO=P_ACCOUNT_NO
	FOR UPDATE OF BALANCE;
	
	INACTIVEACCOUNT EXCEPTION;
	
BEGIN
	OPEN DI_CURSOR;
	FETCH DI_CURSOR INTO V_BALANCE,V_STATUS ;
	
	IF DI_CURSOR%NOTFOUND THEN
		RAISE_APPLICATION_ERROR (-2001 ||'ACCOUNT IS NOT FOUND');
	END IF;
	
	IF V_STATUS != 'ACTIVE' THEN
		RAISE INACTIVEACCOUNT EXCEPTION;
	END IF ;
	
	UPDATE ACCOUNTS 
	SET BALANCE = BALANCE + P_AMOUNT
	WHERE ACCOUNT_NO = P_ACCOUNT_NO;
	DBMS_OUTPUT.PUT_LINE('YOUR ACCOUNT IS CREADITED WITH'||P_AMOUNT ||"Available balance is "||BALANCE|| 'ON'||SYSDATE);
	INSERT INTO TRANSACTIONS (ACCOUNT_NO,AMOUNT,TRANSACTION_TYPE,TRANSACTION_MODE,TRANSACTION_DATE)
	VALUES(P_ACCOUNT_NO,P_AMOUNT,'DEPOSIT',P_TRANSACTION_MODE,SYSDATE);
	COMMIT;
	CLOSE DI_AMOUT;
	DBMS_OUTPUT.PUT_LINE('DEPOSITE IS DONE SUCESSFULLY');
	
EXCEPTION 
	WHEN NO_DATA_FOUND THEN 
		ROLLBACK;
		DBMS_OUTPUT.PUT_LINE('ACCOUNT IS NOT FOUND ');
	WHEN INACTIVEACCOUNT THEN
		ROLLBACK;
		DBMS_OUTPUT.PUT_LINE('YOUR ACCOUNT IS NOT ACTIVE');
	WHEN OTHERS THEN 
		ROLLBACK;
		INSERT INTO FAILED_TRANSACTIONS(ACCOUNT_NO,TRANSACTION_TYPE,TRANSACTION_DATE,TRANSACTION_MODE,FAILURE_REASON,AMOUNT)
		VALUES (P_ACCOUNT_NO,'DEPOSIT',SYSDATE,P_TRANSACTION_MODE,SQLERRM,P_AMOUNT);
		DBMS_OUTPUT.PUT_LINE('ERROR MESSAGE IS:'||SQLERRM);
		CLOSE DI_AMOUT;
END DEPOSIT_AMOUNT;
/	
	
------------------UPDATING Withdrawal Procedure-------------------------

CREATE OR REPLACE PROCEDURE WITHDRAWAL_AMOUNT 
(
P_ACCOUNT_NO IN NUMBER,
P_AMOUNT IN NUMBER,
P_FEE IN NUMBER,
P_TRANSACTION_MODE IN VARCHAR2
)IS 

	V_BALANCE ACCOUNTS.BALANCE%TYPE;
	V_STATUS ACCOUNTS.STATUS%TYPE;
	CURSOR WD_AMOUNT IS 
	SELECT BALANCE,STATUS 
	FROM ACCOUNTS 
	WHERE ACCOUNT_NO = P_ACCOUNT_NO
	FOR UPDATE OF BALANCE;
	
	INACTIVEACCOUNT EXCEPTION;
	INSUFFICIENTFUNDS EXCEPTION;
	
BEGIN

	OPEN WD_AMOUNT ;
	FETCH WD_AMOUNT INTO V_BALANCEC,V_STATUS ;
	
	IF WD_AMOUNT%NOTFOUND THEN
		RASIE_APPLICATION_ERROR (-2002 'ACCOUNT IS NOT FOUND');
	END IF ;
	
	IF V_STATUS!= 'ACTIVE' THEN 
		RAISE INACTIVEACCOUNT;
	END IF ;
	
	IF V_BALANCE < P_AMOUNT +P_FEE THEN 
		RAISE INSUFFICIENTFUNDS;
	END IF ;
	
	UPDATE ACCOUNTS SET BALANCE = BALANCE - P_AMOUNT - P_FEE
	WHERE ACCOUNT_NO = P_ACCOUNT_NO;
	DBMS_OUTPUT.PUT_LINE("Your Account is debited with "||P_AMOUNT||"Available balance is "||BALANCE|| 'ON'||SYSDATE);
	INSERT INTO TRANSACTIONS (ACCOUNT_NO,AMOUNT,TRANSACTION_TYPE,TRANSACTION_MODE,TRANSACTION_DATE,TRANSACTION_HANDLING_FEE,DESCRIPTION)
	VALUES(P_ACCOUNT_NO,P_AMOUNT,'WITHDRAWAL',P_TRANSACTION_MODE,SYSDATE,P_FEE,'WITHDRAWAL WITH HLATFORM HANDING FEE');
	
	COMMIT;
	DBMS_OUTPUT.PUT_LINE('Withdrawal successful. Handling fee applied.');
	CLOSE WD_AMOUT;
	
EXCEPTION 
	WHEN NO_DATA_FOUND THEN
	ROLLBACK;
		DBMS_OUTPUT.PUT_LINE('ACCOUNT NUMBER IS NOT FOUND.');
	WHEN INACTIVEACCOUNT THEN 
		ROLLBACK;
		DBMS_OUTPUT.PUT_LINE('ACCOUNT IS NOT ACTIVE');
	WHEN OTHERS THEN 
		ROLLBACK;
		INSERT INTO FAILED_TRANSACTIONS(ACCOUNT_NO,AMOUNT,TRANSACTION_TYPE,TRANSACTION_DATE,TRANSACTION_MODE,FAILURE_REASON)
		VALUES (P_ACCOUNT_NO,P_AMOUNT,'WITHDRAWAL',SYSDATE,P_TRANSACTION_MODE,SQLERRM);
		DBMS_OUTPUT.PUT_LINE('ERROR:'||SQLERRM);
		CLOSE WD_CURSOR;
END WITHDRAWAL_AMOUNT;
/

-----------------------------3. Implement Retry Logic----------------------------

CREATE OR REPLACE PROCEDURE RETRY_FAILED_TRANSACTION
--(
--P_ACCOUNT_NO NUMBER,
--P_AMOUNT NUMBER,
--P_TRANSACTION_TYPE VARCHAR2,
--P_TRANSACTION_DATE DATE,
--P_TRANSACTION_MODE VARCHAR2
--)
IS
	CURSOR FAILED_TRANSACTION IS 
	SELECT TRANSACTION_ID,ACCOUNT_NO,TRANSATION_TYPE,TRANSACTION_MODE,AMOUNT,RETRY_COUNT
	FROM FAILED_TRANSACTIONS
	WHERE RETRY_COUNT >1
	FOR UPDATE; 
	
	V_TRANSACTION_ID FAILED_TRANSACTIONS.TRANSACTION_ID%TYPE;
	V_ACCOUNT_NO FAILED_TRANSACTIONS.ACCOUNT_NO%TYPE;
	V_AMOUNT FAILED_TRANSACTIONS.AMOUNT%TYPE;
	V_TRANSACTION_TYPE FAILED_TRANSACTIONS.TRANSACTION_TYPE%TYPE;
	V_TRASACTION_MODE FAIED_TRANSACTIONS.TRANSACTION_MODE%TYPE;
	V_RETRY_COUNT FAIED_TRANSACTIONS.RETRY_COUNT%TYPE;
BEGIN
	
	OPEN FAILED_TRANSACTION;
	FOR TXN IN FAILED_TRANSACTION LOOP
		V_TRANSACTION_ID :=TXN.TRANSACTION_ID;
		V_ACCOUT_NO :=TXN.ACCOUNT_NO;
		V_AMOUNT := TXN.AMOUNT;
		V_TRANSACTION_TYPE:=TXN.TRNSACTION_TYPE;
		V_TRASACTION_MODE := TXN.TRANSACTION_MODE;
		V_RETRY_COUNT := TXN.RETRY_COUNT;
		
		IF V_TRANSACTION_TYPE = 'DEPOSIT' THEN
			EXEC DEPOSIT_AMOUNT(V_ACCOUT_NO,V_AMOUNT,V_TRASACTION_MODE);
		ELSIF V_TRANSACTION_TYPE = 'WITHDRAWAL' THEN 
			EXEC WITHDRAWAL_AMOUNT (V_ACCOUT_NO,V_AMOUNT,0,V_TRASACTION_MODE);
		END IF;
	DELETE FROM FAILED_TRANSACTIONS WHERE TRANSACTION_ID = V_TRANSACTION_ID ;
	COMMIT;
	
	CLOSE FAILED_TRANSACTION;
EXCEPTION 
	WHEN OTHERS THEN 
		UPDATE FAILED_TRANSACTIONS 
		SET RETRY_COUNT = V_RETRY_COUNT +1 , LAST_RETRY_DATE = SYSDATE 
		WHERE TRANSACTION_ID = V_TRANSACTION_ID;
	
	END LOOP;
	COMMIT;
END RETRY_FAILED_TRANSACTION;
/

-------------------Procedure to enquery the balance from account --------------------------


CREATE OR REPLACE PROCEDURE BALANCE_ENQUERY
(
P_ACCOUNT_NO IN NUMBER
)IS 

	CURSOR BAL_ENQ IS
	SELECT BALANCE FROM ACCOUNTS
	WHERE ACCOUNT_NO = P_ACCOUNT;
	
	V_BALANCE ACCOUTNS.BALANCE%TYPE;
	
BEGIN

	OPEN BAL_ENQ;
	FETCH BAL_ENQ INTO V_BALANCE ;
	EXIT WHEN BAL_ENQ%NOTFOUND;
	
	DBMS_OUTPUT.PUT_LINE('THE AVAILABLE BALANCE IN YOUR ACCOUNT IS '||V_BALANCE);
	
	CLOSE BAL_ENQ;
EXCEPTION 
	WHEN NO_DATA_FOUND THEN 
		DBMS_OUTPUT.PUT_LINE(P_ACCOUNT_NO||'ACCOUNT IS NOT VALID');
	WHEN OTHERS THEN 
		DBMS_OUPUT.PUT_LINE('ERROR :'||SQLERRM);
END BALANCE_ENQUERY;
/

CREATE OR REPLACE ROCEDURE VIEW_BALANCE
(
P_ACCOUNT_NO IN NUMBER,
P_BALANCE OUT NUMBER 
)IS 

BEGIN
	SELECT 
	BALANCE INTO P_BALANCE 
	FROM ACCOUNTS
	WHERE ACCOUNT_NO = P_ACCOUNT_NO;
	
	DBMS_OUTPUT.PUT_LINE('THE AVAILABEL BALANCE IS '|| P_BALANCE);
	
EXCEPTION 
	WHEN NO_DATA_FOUND THEN 
		P_BALANCE := NULL
		DBMS_OUTPUT.PUT_LINE('ACCOUNT NUMBER IS OT VALID');
	WHEN OTHERS THEN 
		P_BALANCE := NULL;
		DBMS_OUTPUT.PUT_LINE('ERROR:'||SQLERRM);
END VIEW_BALANCE;
/

------------------Procedure to view transaction history------------------------


CREATE OR REPLACE PROCEDURE VIEW_TRANSACTION_HISTROY
(
P_ACCOUNT_NO IN NUMBER 
)IS 

	CURSOR TRAN_HIS IS
	SELECT * FROM TRANSACTIONS
	WHERE ACCOUNT_NO = P_ACCOUNT_NO
	ORDER BY TRANSACTION_DATE;
	--V_TRANSACTION_ID TRANSACTIONS.TRANSACTION_ID%TYPE;
	--V_TRANSACTION_DATE TRANSACTIONS.TRANSACTION_DATE%TYPE;
	--V_TRANSACTION_TYPE TRANSACTIONS.TRANSACTION_TYPE%TYPE;
	--V_AMOUNT TRANSACTIONS.AMOUNT%TYPE;
	--V_TRANSACTION_MODE TRANSACTIONS.TRANSACTION_MODE%TYPE;
	--V_DESCRIPTION TRANSACTIONS.DESCRIPTION%TYPE;
	
BEGIN
	OPEN TRAN_HIS 
	FOR TXN IN TRAN_HIS LOOP;
	EXIT WHEN TRAN_HIS%NOT_FOUND;
	
	DBMS_OUTPUT.PUT_LINE(TXN.TRANSACTION_ID ||''||TXN.TRANSACTION_DATE||''||TXN.TRANSACTION_TYPE||''||TXN.AMOUNT||''||TXN.TRANSACTION_MODE||''||TXN.DESCRIPTION);
	
	END LOOP;
	CLOSE TRAN_HIS;
EXCEPTION 
	WHEN NO_DATA_FOUND THEN
		DBMS_OUTPUTPUT_LINE('TRANSACTION HISTORY IS NOT FOUND FOR THIS ACCOUNT NO'||P_ACCOUNT_NO);
	WHEN THERS THEN 
		DBMS_OUTPUT.PUT_LINE('ERROR:'||SQLERRM);
END VIEW_TRANSACTION_HISTROY;
/

-----------------------------Procedure to generate account statement -----------

CREATE OR REPLACE PROCEDURE GENERATE_STATEMENT
(
P_ACCOUNT_NO IN NUMBER,
P_START_DATE IN DATE,
P_END_DATE IN DATE,
)IS 
		CURSOR GEN_STA IS 
		SELECT TRANSACTION_ID ,TRANSACTION_TYPE,TRANSACTION_DATE,TRANSACTION_MODE,AMOUNT,DESCRIPTION
		FROM TRANSACTIONS 
		WHERE ACCOUNT_NO = P_ACCOUNT_NO AND 
		TRANSACTION_DATE IN BETWEEN P_START_DATE AND P_END_DATE;
BEGIN
	OPEN GEN_STA;
	FOR TXN IN GEN_STA LOOP;
	EXIT WHEN GEN_STA%NOTFOUND;
	
	DBMS_OUTPUT.PUT_LINE(TRANSACTION_ID||''||TRANSACTION_TYPE||''||TRANSACTION_DATE||''||TRANSACTION_MODE||''||AMOUNT||''||DESCRIPTION);
	END LOOP;
	CLOSE GEN_STA;
EXCEPTION 
	WHEN NO_DATA_FOUND THEN 
		DBMS_OUTPUT.PUT_LINE('ACCOUNT NUMBER IS NOT VALID');
	WHEN OTHERS THEN 
		DBMS_OUTPUT.PUT_LINE('ERROR:'||SQLERRM);
END GENERATE_STATEMENT;
/

	